{"version":3,"sources":["App.js","services/api.js","serviceWorker.js","index.js"],"names":["App","useState","states","setStates","useEffect","fetch","method","then","response","json","data","catch","error","console","useCall","arborLoaded","setArborLoaded","arborScript","document","createElement","src","async","onload","head","appendChild","tweenScript","removeChild","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6QA8IeA,MAnIf,WAAgB,IAAD,ECTQ,WAAO,IAAD,EACCC,mBAAS,IADV,mBACpBC,EADoB,KACZC,EADY,KAgB3B,OAbAC,qBAAU,WACRC,MAAM,+BAAgC,CACpCC,OAAQ,SAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLP,EAAUO,EAAKR,WAEhBS,OAAM,SAACC,GACNC,QAAQD,MAAMA,QAEjB,IAEIV,EDNUY,GADJ,uBAEyBb,oBAAS,IAFlC,mBAENc,EAFM,KAEOC,EAFP,KAqHb,OAjHAZ,qBAAU,WACR,IAAMa,EAAcC,SAASC,cAAc,UAC3CF,EAAYG,IAAM,wCAClBH,EAAYI,OAAQ,EACpBJ,EAAYK,OAAS,kBAAMN,GAAe,IAC1CE,SAASK,KAAKC,YAAYP,GAE1B,IAAMQ,EAAcP,SAASC,cAAc,UAK3C,OAJAM,EAAYL,IAAM,8CAClBK,EAAYJ,OAAQ,EACpBH,SAASK,KAAKC,YAAYC,GAEnB,WACLP,SAASK,KAAKG,YAAYT,GAC1BC,SAASK,KAAKG,YAAYD,MAE3B,IAEEV,GAEHF,QAAQD,MAAM,qBA8Fd,yBAAKe,UAAU,OACb,4BAAQA,UAAU,cAChB,uDEvHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8B,a","file":"static/js/main.97a00569.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport $ from \"jquery\";\n// import useScript from \"./services/useScript\";\nimport { useCall } from \"./services/api\";\nimport { useScript } from \"usehooks-ts\";\n\n/*\n Use this script to make a call to the REST endpoint on the Node JS server.\n Use a graph visualization library to present the topology of the robots\n*/\nfunction App() {\n  const [states] = useCall();\n  const [arborLoaded, setArborLoaded] = useState(false);\n\n  useEffect(() => {\n    const arborScript = document.createElement(\"script\");\n    arborScript.src = \"http://localhost:3000/public/arbor.js\";\n    arborScript.async = true;\n    arborScript.onload = () => setArborLoaded(true);\n    document.head.appendChild(arborScript);\n\n    const tweenScript = document.createElement(\"script\");\n    tweenScript.src = \"http://localhost:3000/public/arbor-tween.js\";\n    tweenScript.async = true;\n    document.head.appendChild(tweenScript);\n\n    return () => {\n      document.head.removeChild(arborScript);\n      document.head.removeChild(tweenScript);\n    };\n  }, []);\n\n  if (!arborLoaded) {\n    // return <div>Loading...</div>;\n    console.error(\"arbor not defined\");\n  }\n\n  // remove and remove public?\n  // look into whether to use build?\n  // useScript(\"http://localhost:3000/src/arbor/arbor.js\");\n  // useScript(\"http://localhost:3000/src/arbor-tween.js\");\n  // useScript(\"http://localhost:3000/public/arbor.js\");\n  // useScript(\"http://localhost:3000/public/arbor-tween.js\");\n\n  // const canvasRef = useRef(null);\n\n  // const status = useScript(\"./public/arbor.js\", {\n  //   removeOnUnmount: false,\n  // });\n\n  // useEffect(() => {\n  //   if (typeof arbor !== \"undefined\") {\n  //     // jQuery is loaded => print the version\n  //     // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  //     console.log(\"arbor is loaded\");\n  //   }\n  // }, [status]);\n\n  // useEffect(() => {\n  //   function initArbor() {\n  //     if (typeof arbor === \"undefined\") {\n  //       console.error(\"arbor not defined\");\n  //       return;\n  //     }\n\n  //     if (typeof renderer === \"undefined\") {\n  //       console.error(\"renderer not defined\");\n  //       return;\n  //     }\n\n  //     var sys = arbor.ParticleSystem(1000, 600, 0.5);\n  //     sys.parameters({ gravity: true });\n  //     sys.renderer = renderer;\n\n  //     var node1 = sys.addNode(\"node1\", { label: \"Node 1\" });\n  //     var node2 = sys.addNode(\"node2\", { label: \"Node 2\" });\n  //     var node3 = sys.addNode(\"node3\", { label: \"Node 3\" });\n\n  //     sys.addEdge(node1, node2);\n  //     sys.addEdge(node2, node3);\n  //   }\n\n  //   useScript(\"./arbor/arbor.js\", () => {\n  //     console.log(\"arbor.js loaded\");\n  //   });\n\n  //   useScript(\"./arbor/arbor-tween.js\", () => {\n  //     console.log(\"arbor-tween.js loaded\");\n  //   });\n\n  //   window.onload = function () {\n  //     initArbor();\n  //   };\n  // }, []);\n\n  // console.log(states, \"this is states\");\n\n  // useEffect(() => {\n  //   // Load the arbor and arbor-tween scripts using the useScript hook\n  //   // useScript(\"./arbor/arbor.js\");\n  //   // useScript(\"./arbor/arbor-tween.js\");\n\n  //   // Initialize the arbor graph\n  //   const sys = arbor.ParticleSystem();\n  //   sys.parameters({ gravity: true });\n  //   sys.renderer = new arbor.Renderer(canvasRef.current);\n\n  //   // Add the nodes and edges to the graph\n  //   for (let i = 0; i < states.length; i++) {\n  //     sys.addNode(states[i].id);\n  //   }\n  //   for (let i = 0; i < states.length; i++) {\n  //     const state = states[i];\n  //     for (let j = 0; j < state.connections.length; j++) {\n  //       const connection = state.connections[j];\n  //       sys.addEdge(state.id, connection);\n  //     }\n  //   }\n\n  //   // Redraw the graph whenever the window is resized\n  //   $(window).resize(() => {\n  //     sys.renderer.redraw();\n  //   });\n  // }, [states]);\n\n  // how to utilize the service workers?\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Your code goes here..</p>\n      </header>\n      {/* <body> */}\n      {/* <canvas ref={canvasRef} width=\"800\" height=\"600\"></canvas> */}\n      {/* </body> */}\n      {/* <script src=\"./public/arbor.js\"></script>\n      <script src=\"./public/arbor-tween.js\"></script> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\n\nexport const useCall = () => {\n  const [states, setStates] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:3001/states\", {\n      method: \"POST\",\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setStates(data.states);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, []);\n\n  return states;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}